<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker搭建Remark42评论系统</title>
    <link href="/archives/docker-install-remark42.html"/>
    <url>/archives/docker-install-remark42.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>搭建完Hexo，我们需要一个评论服务，在Fluid主题里反复挑选，发现Remark42在颜值和功能都达到需求，所以这一篇我们来搭建一个评论服务。</p><h2 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2. 介绍"></a>2. 介绍</h2><p>Remark42 是一个开源、自托管、轻量级且功能强大的评论服务</p><p><img src="https://img.ins.run/L9yZ0R.webp" alt="介绍.webp"></p><ul><li>支持匿名、邮箱登录</li><li>支持各种OAuth，如GitHub、Google、Facebook、Twitter、Yandex</li><li>支持数据迁移，可以导入Disqus和WordPress的评论数据</li><li>支持手动备份和自动备份，支持备份数据恢复</li><li>强大的管理功能，管理员可以置顶、删除评论和用户禁言</li><li>支持浅色和深色模式，带有树和普通演示文稿的多层嵌套评论</li><li>支持多种评论排序</li><li>支持最近的评论</li><li>支持投票，个人标示和验证</li><li>支持RSS</li><li>支持通知</li><li>支持Docker的部署</li></ul><h2 id="3-展示"><a href="#3-展示" class="headerlink" title="3. 展示"></a>3. 展示</h2><p>官方的Demo：<a href="https://remark42.com/demo">https://remark42.com/demo</a></p><p><img src="https://img.ins.run/e45X8z.webp" alt="Demo.webp"></p><h2 id="3-相关地址"><a href="#3-相关地址" class="headerlink" title="3. 相关地址"></a>3. 相关地址</h2><p>Github：<a href="https://github.com/umputun/remark42">https://github.com/umputun/remark42</a><br>官网：<a href="https://remark42.com/">https://remark42.com</a></p><h2 id="4-环境说明"><a href="#4-环境说明" class="headerlink" title="4. 环境说明"></a>4. 环境说明</h2><ul><li>服务器：我自己搭建用的是 <a href="https://racknerd.com/"><strong>Racknerd</strong></a> 的VPS 一台，最好是选 非大陆（香港）的服务器</li><li>系统：<strong>Debian10</strong>或以上（<strong>Ubuntu 20.04</strong>以上）</li><li>域名一个，可以去<a href="https://wanwang.aliyun.com/">阿里云</a>，<a href="https://www.namesilo.com/">Namesilo</a>上注册一个</li></ul><h2 id="5-搭建过程"><a href="#5-搭建过程" class="headerlink" title="5. 搭建过程"></a>5. 搭建过程</h2><p>官方提供了两种安装方式，一种是Docker，一种是二进制，这里采用Docker安装的方式</p><h3 id="5-1-创建安装目录"><a href="#5-1-创建安装目录" class="headerlink" title="5.1 创建安装目录"></a>5.1 创建安装目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -i<br><br><span class="hljs-built_in">mkdir</span> -p /root/data/docker_data/ramark42<br><br><span class="hljs-built_in">cd</span> /root/data/docker_data/ramark42<br></code></pre></td></tr></table></figure><h3 id="5-2-创建并编辑-docker-compose-yml-文件"><a href="#5-2-创建并编辑-docker-compose-yml-文件" class="headerlink" title="5.2 创建并编辑 docker-compose.yml 文件"></a>5.2 创建并编辑 docker-compose.yml 文件</h3><p>这是官方的配置文件</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><br><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">remark</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-comment"># remove the next line in case you want to use this docker-compose separately</span><br>    <span class="hljs-comment"># as otherwise it would complain for absence of Dockerfile</span><br>    <span class="hljs-attribute">build</span><span class="hljs-punctuation">:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">umputun/remark42:latest</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;remark42&quot;</span><br>    <span class="hljs-attribute">hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;remark42&quot;</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br><br>    <span class="hljs-attribute">logging</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">json-file</span><br>      <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">max-size</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10m&quot;</span><br>        <span class="hljs-attribute">max-file</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5&quot;</span><br><br>    <span class="hljs-comment"># uncomment to expose directly (no proxy)</span><br>    <span class="hljs-comment">#ports:</span><br>    <span class="hljs-comment">#  - &quot;80:8080&quot;</span><br>    <span class="hljs-comment">#  - &quot;443:8443&quot;</span><br><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REMARK_URL</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SECRET</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">DEBUG=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">AUTH_GOOGLE_CID</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">AUTH_GOOGLE_CSEC</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">AUTH_GITHUB_CID</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">AUTH_GITHUB_CSEC</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">AUTH_FACEBOOK_CID</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">AUTH_FACEBOOK_CSEC</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">AUTH_DISQUS_CID</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">AUTH_DISQUS_CSEC</span><br>      <span class="hljs-comment"># Enable it only for the initial comment import or for manual backups.</span><br>      <span class="hljs-comment"># Do not leave the server running with the ADMIN_PASSWD set if you don&#x27;t have an intention</span><br>      <span class="hljs-comment"># to keep creating backups manually!</span><br>      <span class="hljs-comment"># - ADMIN_PASSWD=&lt;your secret password&gt;</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./var:/srv/var</span><br></code></pre></td></tr></table></figure><p>这是我修改过的配置文件，请将<code>###</code>改成你的配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs routeros">version: <span class="hljs-string">&quot;2&quot;</span><br><br>services:<br>  remark:<br>    # <span class="hljs-built_in">remove</span> the next line <span class="hljs-keyword">in</span> case you want <span class="hljs-keyword">to</span> use this docker-compose separately<br>    # as otherwise it would complain <span class="hljs-keyword">for</span> absence of Dockerfile<br>    build: .<br>    image: umputun/remark42:latest<br>    container_name: <span class="hljs-string">&quot;Remark42&quot;</span><br>    hostname: <span class="hljs-string">&quot;remark42&quot;</span><br>    restart: always<br>    networks:<br>      -<span class="hljs-built_in"> default</span><br><span class="hljs-built_in"></span><br>    logging:<br>      driver: json-file<br>      options:<br>        max-size: <span class="hljs-string">&quot;10m&quot;</span><br>        max-file: <span class="hljs-string">&quot;5&quot;</span><br><br>    # uncomment <span class="hljs-keyword">to</span> expose directly (<span class="hljs-literal">no</span> proxy)<br>    ports:<br>     - <span class="hljs-string">&quot;8005:8080&quot;</span><br>     - <span class="hljs-string">&quot;8243:8443&quot;</span><br><br>    environment:<br>      - <span class="hljs-attribute">REMARK_URL</span>=###<br>      - <span class="hljs-attribute">SITE</span>=###<br>      - <span class="hljs-attribute">SECRET</span>=###<br>      - <span class="hljs-attribute">DEBUG</span>=<span class="hljs-literal">true</span><br>      - <span class="hljs-attribute">AUTH_ANON</span>=<span class="hljs-literal">true</span><br>      - <span class="hljs-attribute">AUTH_GITHUB_CID</span>=###<br>      - <span class="hljs-attribute">AUTH_GITHUB_CSEC</span>=###<br>      - <span class="hljs-attribute">AUTH_TELEGRAM</span>=<span class="hljs-literal">true</span><br>      - <span class="hljs-attribute">TELEGRAM_TOKEN</span>=###<br>      - <span class="hljs-attribute">EMOJI</span>=<span class="hljs-literal">true</span><br>      - <span class="hljs-attribute">SMTP_HOST</span>=###<br>      - <span class="hljs-attribute">SMTP_PORT</span>=465<br>      - <span class="hljs-attribute">SMTP_TLS</span>=<span class="hljs-literal">true</span><br>      - <span class="hljs-attribute">SMTP_USERNAME</span>=###<br>      - <span class="hljs-attribute">SMTP_PASSWORD</span>=###<br>      - <span class="hljs-attribute">AUTH_EMAIL_ENABLE</span>=<span class="hljs-literal">true</span><br>      - <span class="hljs-attribute">AUTH_EMAIL_FROM</span>=###<br>      - <span class="hljs-attribute">AUTH_EMAIL_SUBJ</span>=###<br>      - <span class="hljs-attribute">NOTIFY_USERS</span>=email<br>      - <span class="hljs-attribute">NOTIFY_EMAIL_FROM</span>=###<br>      - <span class="hljs-attribute">NOTIFY_EMAIL_VERIFICATION_SUBJ</span>=Remark42 sign <span class="hljs-keyword">in</span> confirmation<br>      - <span class="hljs-attribute">NOTIFY_ADMINS</span>=telegram<br>      - <span class="hljs-attribute">NOTIFY_TELEGRAM_CHAN</span>=###<br>      - <span class="hljs-attribute">NOTIFY_TYPE</span>=telegram<br>      - <span class="hljs-attribute">ADMIN_SHARED_EMAIL</span>=###<br>      - <span class="hljs-attribute">MAX_VOTES</span>=-1<br>      - <span class="hljs-attribute">VOTES_IP_TIME</span>=0s<br>      # <span class="hljs-built_in">Enable</span> it only <span class="hljs-keyword">for</span> the initial comment import <span class="hljs-keyword">or</span> <span class="hljs-keyword">for</span><span class="hljs-built_in"> manual </span>backups.<br>      # <span class="hljs-keyword">Do</span> <span class="hljs-keyword">not</span> leave<span class="hljs-built_in"> server </span>running with ADMIN_PASSWD <span class="hljs-built_in">set</span> <span class="hljs-keyword">if</span> you don<span class="hljs-string">&#x27;t have intention</span><br><span class="hljs-string">      # to keep creating backups manually!</span><br><span class="hljs-string">      # - ADMIN_PASSWD=&lt;your secret password&gt;</span><br><span class="hljs-string">    volumes:</span><br><span class="hljs-string">      - ./data/var:/srv/var</span><br><span class="hljs-string"></span><br><span class="hljs-string">networks:</span><br><span class="hljs-string">  default:</span><br><span class="hljs-string">  name: remark-nginx</span><br></code></pre></td></tr></table></figure><h2 id="6-反向代理"><a href="#6-反向代理" class="headerlink" title="6. 反向代理"></a>6. 反向代理</h2><p>如果有安装UFW防火墙的记得在防火墙放行相应端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ufw</span> <span class="hljs-literal">allow</span> <span class="hljs-number">8005</span>/tcp<br></code></pre></td></tr></table></figure><p>请把端口修改成自己的</p><blockquote><p><strong>说明</strong>：另外，服务商提供的防火墙也要放行（如果有的话）</p></blockquote><p><img src="https://img.ins.run/axauVG.webp" alt="反向代理-1.webp"></p><p><img src="https://img.ins.run/KzsyOE.webp" alt="反向代理-2.webp"></p><p>反向代理后，域名+&#x2F;web在浏览器访问</p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>打开并编辑Fluid主题配置文件，找到 <code>comments</code> ，把 <code>enable:</code> 后面的<code>false</code> 修改成 <code>true</code> ，并在 <code>type:</code> 后面填写 <code>remark42</code></p><p><img src="https://img.ins.run/LJLSC6.webp" alt="开启评论插件.webp"></p><p>然后搜索 <code>Remark42</code> 找到后把配置修改成自己的</p><p><img src="https://img.ins.run/7yiabj.webp" alt="配置Remark42.webp"></p><h2 id="7-邮箱和第三方登录"><a href="#7-邮箱和第三方登录" class="headerlink" title="7. 邮箱和第三方登录"></a>7. 邮箱和第三方登录</h2><h3 id="7-1-匿名登录"><a href="#7-1-匿名登录" class="headerlink" title="7.1 匿名登录"></a>7.1 匿名登录</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">AUTH_ANON</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="7-2-Github-登录"><a href="#7-2-Github-登录" class="headerlink" title="7.2 Github 登录"></a>7.2 Github 登录</h3><ol><li>在 “<strong>OAuth App</strong>”: <a href="https://github.com/settings/developers">https://github.com/settings/developers</a></li><li>点击 “<strong>New OAuth App</strong>”</li><li>输入 “<strong>Application Name</strong>” Application name里填名称，如zxlxのBlog</li><li>“<strong>Homepage URL</strong>” Homepage URL里填网站链接，如<a href="https://blog.ins.run/">https://blog.ins.run</a></li><li>在”<strong>Authorization callback URL</strong>“ 按 域名 + &#x2F;auth&#x2F;github&#x2F;callback 的格式输入, <a href="https://remark42.ins.run/auth/github/callback">https://remark42.ins.run/auth/github/callback</a></li><li>点击 “<strong>Register application</strong>”，得到”<strong>Client ID</strong>“和 “<strong>Client secrets</strong>”，填入到docker-compose配置文件中</li></ol><h3 id="7-3-Telegram-登录"><a href="#7-3-Telegram-登录" class="headerlink" title="7.3 Telegram 登录"></a>7.3 Telegram 登录</h3><h4 id="7-3-1-获取-HTTP-API"><a href="#7-3-1-获取-HTTP-API" class="headerlink" title="7.3.1 获取 HTTP API"></a>7.3.1 获取 HTTP API</h4><p>和 <a href="https://t.me/botfather">@BotFather</a> 聊天</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/newbot<br></code></pre></td></tr></table></figure><p>输入机器人名字和用户名，Telegram就会给出 HTTP API</p><h4 id="7-3-2-启用-Telegram-登录"><a href="#7-3-2-启用-Telegram-登录" class="headerlink" title="7.3.2 启用 Telegram 登录"></a>7.3.2 启用 Telegram 登录</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">AUTH_TELEGRAM</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="7-3-3-管理员通知"><a href="#7-3-3-管理员通知" class="headerlink" title="7.3.3 管理员通知"></a>7.3.3 管理员通知</h4><p>创建一个频道，将上面的机器人作为管理员添加到其中，配置文件中设置频道ID。<a href="https://github.com/GabrielRF/telegram-id#web-channel-id">Telegram私有频道ID获取办法</a> ，ID是13位数字，以 <code>-</code> 负号开始</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">NOTIFY_ADMINS</span>=telegram<br><span class="hljs-title class_">NOTIFY_TELEGRAM_CHAN</span>=<span class="hljs-number">-100</span>**********<br><span class="hljs-title class_">NOTIFY_TYPE</span>=telegram<br><span class="hljs-title class_">NOTIFY_TELEGRAM_TOKEN</span>=<span class="hljs-number">62</span>*****<span class="hljs-number">253</span><span class="hljs-symbol">:AA***********************************</span><br></code></pre></td></tr></table></figure><h4 id="7-3-4-用户通知"><a href="#7-3-4-用户通知" class="headerlink" title="7.3.4 用户通知"></a>7.3.4 用户通知</h4><p>暂时不能使用</p><h3 id="8-邮箱登录"><a href="#8-邮箱登录" class="headerlink" title="8. 邮箱登录"></a>8. 邮箱登录</h3><h4 id="8-1-SMTP配置"><a href="#8-1-SMTP配置" class="headerlink" title="8.1 SMTP配置"></a>8.1 SMTP配置</h4><ul><li>要启用任何邮箱功能，下面的三个字段必须要填写：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">SMTP_HOST</span>=###<br><span class="hljs-attribute">SMTP_PORT</span>=465<br><span class="hljs-attribute">SMTP_TLS</span>=<span class="hljs-literal">true</span><br><span class="hljs-attribute">SMTP_USERNAME</span>=###<br><span class="hljs-attribute">SMTP_PASSWORD</span>=###<br></code></pre></td></tr></table></figure></li></ul><h4 id="8-2-邮箱登录验证"><a href="#8-2-邮箱登录验证" class="headerlink" title="8.2 邮箱登录验证"></a>8.2 邮箱登录验证</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">AUTH_EMAIL_ENABLE</span>=<span class="hljs-literal">true</span><br><span class="hljs-attribute">AUTH_EMAIL_FROM</span>=###<br><span class="hljs-attribute">AUTH_EMAIL_SUBJ</span>=<span class="hljs-string">&quot;在 zxlx.net 留言确认&quot;</span><br><span class="hljs-attribute">AUTH_EMAIL_CONTENT_TYPE</span>=###<br></code></pre></td></tr></table></figure><h4 id="8-3-用户通知"><a href="#8-3-用户通知" class="headerlink" title="8.3 用户通知"></a>8.3 用户通知</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">NOTIFY_USERS</span>=email<br><span class="hljs-attribute">NOTIFY_EMAIL_FROM</span>=###<br><span class="hljs-attribute">NOTIFY_EMAIL_VERIFICATION_SUBJ</span>=<span class="hljs-string">&#x27;邮件确认&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="8-4-管理员通知"><a href="#8-4-管理员通知" class="headerlink" title="8.4 管理员通知"></a>8.4 管理员通知</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">NOTIFY_ADMINS=email<br>NOTIFY_EMAIL_FROM=###<br>ADMIN_SHARED_EMAIL=###<br></code></pre></td></tr></table></figure><p>文章里还有其他的Outh没有写到，可以自行前往官网查看</p><h2 id="8-更新Remark42"><a href="#8-更新Remark42" class="headerlink" title="8.更新Remark42"></a>8.更新Remark42</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/root/</span>data<span class="hljs-regexp">/docker_data/</span>remark42<br><br>docker-compose pull<br><br>docker-compose up -d<br><br>docker image prune<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Remark42</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Docker玩转VPS服务器</title>
    <link href="/archives/hello-docker.html"/>
    <url>/archives/hello-docker.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>由于手动配置服务器环境<strong>LNMP</strong>和<strong>LAMP</strong>好像有点麻烦诶，所以我干脆就使用Docker来部署服务啦，剩下不能用Docker部署的项目就用宝塔海外版本aapanel留作备用来部署（别问为什么不用国内版，因为加入了强制手机登陆验证）。</p><h2 id="2-操作环境"><a href="#2-操作环境" class="headerlink" title="2. 操作环境"></a>2. 操作环境</h2><ul><li>服务器：我自己搭建用的是 <a href="https://racknerd.com/"><strong>Racknerd</strong></a> 26.25 &#x2F; USD &#x2F; 年 VPS 一台，最好是选 非大陆（香港）的服务器</li><li>系统：<strong>Debian10</strong>或以上（<strong>Ubuntu 20.04</strong>以上）</li></ul><h2 id="3-BBR"><a href="#3-BBR" class="headerlink" title="3. BBR"></a>3. BBR</h2><p>新的 TCP 拥塞控制算法 <code>BBR (Bottleneck Bandwidth and RTT)</code> 可以让服务器的带宽尽量跑满，并且尽量不要有排队的情况，让网络服务更佳稳定和高效。</p><p>Linux Kernel 内核升级到 <code>4.9</code> 及以上版本可以实现 BBR 加速（Ubuntu 18.04 默认的内核是 <code>4.15</code> 版本的内核，Ubuntu 20.04 默认的内核是 <code>5.4</code> 版本的内核，并已经默认编译了 TCP BBR 模块，可以直接通过参数开启）。</p><p>目前 Debian10 自带的内核版本一般是4.19，我们可以查看一下内核版本（如果是 5.6 及以上内核则集成了<strong>WireGuard</strong>）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hostnamectl</span>   <span class="hljs-comment">#或者 uname -r</span><br></code></pre></td></tr></table></figure><p><img src="https://img.ins.run/oN66El.webp" alt="查看内核.webp"></p><p>我们选择更新到新的稳定版本的<code>5.1</code>内核（目前为止），再开启<code>BBR</code>。</p><h3 id="3-1-给-Debian-10-添加官方backports源，获取更新的软件库"><a href="#3-1-给-Debian-10-添加官方backports源，获取更新的软件库" class="headerlink" title="3.1 给 Debian 10 添加官方backports源，获取更新的软件库"></a>3.1 给 Debian 10 添加官方backports源，获取更新的软件库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/apt/sources.list<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：本文以 Debian 10 为例，所以使用 <code>/etc/apt/sources.list</code> 仍无问题，但如果你并不是根据本文从头开始，或者使用了其他 Linux 发行版，那么建议你建立 <code>/etc/apt/sources.list.d/</code> 文件夹，并在这个文件夹内建立自己的配置文件，例如 <code>/etc/apt/sources.list.d/vpsadmin.list</code> ，以此保证兼容性，也可避免默认文件在不可预见的情况下被覆盖而导致配置丢失</p></blockquote><p>然后把下面这一条加在最后，并保存退出</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">deb</span> http://archive.debian.org/debian buster-backports main<br></code></pre></td></tr></table></figure><p><img src="https://img.ins.run/U1ekGd.webp" alt="添加backports软件源.webp"></p><h3 id="3-2-刷新软件库并查询-Debian-官方的最新版内核并安装"><a href="#3-2-刷新软件库并查询-Debian-官方的最新版内核并安装" class="headerlink" title="3.2 刷新软件库并查询 Debian 官方的最新版内核并安装"></a>3.2 刷新软件库并查询 Debian 官方的最新版内核并安装</h3><p>请务必安装你的 VPS 对应的版本（本文以比较常见的 <code>amd64</code> 为例）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update &amp;&amp; <span class="hljs-built_in">sudo</span> apt -t buster-backports install linux-image-amd64<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong> 如果你的 VPS 支持，可以尝试【云服务器专用内核】<code>linux-image-cloud-amd64</code>，优点就是精简、资源占用低，缺点嘛,不支持的系统强行安装会导致无法开机（Kernel 无法识别）。<br>为了避免无法识别的悲剧，请确保：</p><ul><li>尝试前做一个系统快照</li><li>你有 <code>vnc</code> 可以救场（并且你知道怎么用）</li></ul></blockquote><h3 id="3-3-修改-kernel-参数配置文件-sysctl-conf-并指定开启-BBR"><a href="#3-3-修改-kernel-参数配置文件-sysctl-conf-并指定开启-BBR" class="headerlink" title="3.3 修改 kernel 参数配置文件 sysctl.conf 并指定开启 BBR"></a>3.3 修改 kernel 参数配置文件 sysctl.conf 并指定开启 BBR</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/sysctl.conf<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：本文以 Debian 10 为例，所以使用 <code>/etc/sysctl.conf</code> 仍无问题，但如果你并不是跟着本文从头开始，或者使用了其他 Linux 发行版，那么建议你建立 <code>/etc/sysctl.d/</code> 文件夹，并在这个文件夹内建立自己的配置文件，例如 <code>/etc/sysctl.d/vpsadmin.conf</code>，以此保证兼容性，因为部分发行版在 <code>systemd</code> 207 版本之后便不再从 <code>/etc/sysctl.conf</code> 读取参数。使用自定义配置文件也可避免默认文件在不可预见的情况下被覆盖而导致配置丢失。</p></blockquote><p>把下面的内容添加进去</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">net.core.default_qdisc</span>=fq<br><span class="hljs-attr">net.ipv4.tcp_congestion_control</span>=bbr<br></code></pre></td></tr></table></figure><p><img src="https://img.ins.run/hPjhKj.webp" alt="开启BBR.webp"></p><p>重启 VPS、使内核更新和<code>BBR</code>设置都生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：因为我使用的 VPS 支持云服务器专用内核，所以我使用了 <code>linux-image-cloud-amd64</code> 。如果你不确定你的 VPS 是否支持，那请务必按照 3.2 的命令，使用常规内核 <code>linux-image-amd64</code></p></blockquote><h3 id="3-3-确认BBR开启"><a href="#3-3-确认BBR开启" class="headerlink" title="3.3 确认BBR开启"></a>3.3 确认BBR开启</h3><p>如果你想确认 <code>BBR</code> 是否正确开启，可以使用下面的命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">lsmod <span class="hljs-string">| grep bbr</span><br></code></pre></td></tr></table></figure><p>此时应该返回这样的结果：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">tcp_bbr</span><br></code></pre></td></tr></table></figure><p>如果你想确认 <code>fq</code> 算法是否正确开启，可以使用下面的命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">lsmod <span class="hljs-string">| grep fq</span><br></code></pre></td></tr></table></figure><p>此时应该返回这样的结果：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sch_fq</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></figure><p><img src="https://img.ins.run/Gm5Wg0.webp" alt="查看升级后内核.webp"></p><p>可以看到，内核版本已经变成了<code>5.10</code></p><h2 id="4-修改时间"><a href="#4-修改时间" class="headerlink" title="4. 修改时间"></a>4. 修改时间</h2><p>首先，我们需要修改服务器的时间与我们本地的时间一致</p><p>香港的服务器的话时间是一样的，如果是海外的服务器，可以通过下面的方式修改</p><p>先查看时间：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">timedatectl</span><br></code></pre></td></tr></table></figure><p>可以看到我们的时间是洛杉矶时区，这边需要修改改一下</p><p><img src="https://img.ins.run/gnF5b3.webp" alt="查看时区.webp"></p><p>把时区改成上海</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">sudo</span> <span class="hljs-string">timedatectl</span> <span class="hljs-built_in">set-timezone</span> <span class="hljs-string">Asia</span>/<span class="hljs-string">Shanghai</span><br></code></pre></td></tr></table></figure><p><img src="https://img.ins.run/vW0dpS.webp" alt="查看修改后时区.webp"></p><h2 id="5-安装Docker、Docker-compose"><a href="#5-安装Docker、Docker-compose" class="headerlink" title="5. 安装Docker、Docker-compose"></a>5. 安装Docker、Docker-compose</h2><h3 id="5-1-非大陆Docker安装"><a href="#5-1-非大陆Docker安装" class="headerlink" title="5.1 非大陆Docker安装"></a>5.1 非大陆Docker安装</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">wget -qO- <span class="hljs-built_in">get</span>.docker.<span class="hljs-keyword">com</span> | bash<br></code></pre></td></tr></table></figure><h4 id="5-2-查看版本"><a href="#5-2-查看版本" class="headerlink" title="5.2 查看版本"></a>5.2 查看版本</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker -v</span><br></code></pre></td></tr></table></figure><h4 id="5-3-开机自启"><a href="#5-3-开机自启" class="headerlink" title="5.3 开机自启"></a>5.3 开机自启</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><h4 id="5-4-卸载Docker"><a href="#5-4-卸载Docker" class="headerlink" title="5.4 卸载Docker"></a>5.4 卸载Docker</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> purge docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/lib/docker<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/lib/containerd<br></code></pre></td></tr></table></figure><h3 id="6-安装Docker-compose"><a href="#6-安装Docker-compose" class="headerlink" title="6. 安装Docker-compose"></a>6. 安装Docker-compose</h3><h4 id="6-1-非大陆Docker-compose安装"><a href="#6-1-非大陆Docker-compose安装" class="headerlink" title="6.1 非大陆Docker-compose安装"></a>6.1 非大陆Docker-compose安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h4 id="6-2-修改权限"><a href="#6-2-修改权限" class="headerlink" title="6.2 修改权限"></a>6.2 修改权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h4 id="6-3-查看版本"><a href="#6-3-查看版本" class="headerlink" title="6.3 查看版本"></a>6.3 查看版本</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker-compose <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p><img src="https://img.ins.run/hwg4vQ.webp" alt="Docker和docker-compose版本.webp"></p><h3 id="6-4-修改Docker配置（来自烧饼博客）"><a href="#6-4-修改Docker配置（来自烧饼博客）" class="headerlink" title="6.4 修改Docker配置（来自烧饼博客）"></a>6.4 修改Docker配置（来自<a href="https://u.sb/debian-install-docker">烧饼博客</a>）</h3><p>以下配置会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，以及限制日志文件大小，防止 Docker 日志塞满硬盘 (泪的教训)</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade">cat &gt; <span class="hljs-regexp">/etc/</span>docker/daemon.json &lt;&lt;EOF<br>&#123;<br>    <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>    <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;20m&quot;</span>,<br>        <span class="hljs-string">&quot;max-file&quot;</span>: <span class="hljs-string">&quot;3&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;ipv6&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;fixed-cidr-v6&quot;</span>: <span class="hljs-string">&quot;fd00:dead:beef:c0::/80&quot;</span>,<br>    <span class="hljs-string">&quot;experimental&quot;</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;ip6tables&quot;</span>:<span class="hljs-literal">true</span><br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>然后重启 Docker 服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart docker</span><br></code></pre></td></tr></table></figure><h2 id="7-文件管理"><a href="#7-文件管理" class="headerlink" title="7. 文件管理"></a>7. 文件管理</h2><p>建议专门给Docker的数据、配置文件新建一个文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p data/docker_data<br></code></pre></td></tr></table></figure><p>这样换服务器或者备份都会方便一点</p><h2 id="8-备份数据（以Remark42为例）"><a href="#8-备份数据（以Remark42为例）" class="headerlink" title="8. 备份数据（以Remark42为例）"></a>8. 备份数据（以Remark42为例）</h2><h3 id="8-1-Docker挂载目录打包"><a href="#8-1-Docker挂载目录打包" class="headerlink" title="8.1 Docker挂载目录打包"></a>8.1 Docker挂载目录打包</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">docker <span class="hljs-keyword">inspect</span>  容器名<br></code></pre></td></tr></table></figure><p>查看<code>Mounts</code>，就可以看到映射到本地的目录<br>然后直接用下面这个命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> --<span class="hljs-built_in">rm</span> --volumes-from CONTAINER -v $(<span class="hljs-built_in">pwd</span>):/backup busybox tar cvfz /backup/backup.tar CONTAINERPATH</span><br></code></pre></td></tr></table></figure><p>更改<code>CONTAINER</code>（容器名）和 <code>CONTAINERPATH</code>（容器内部路径）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> --<span class="hljs-built_in">rm</span> --volumes-from bitwarden -v $(<span class="hljs-built_in">pwd</span>):/backup busybox tar cvfz /backup/backup.tar /data</span><br></code></pre></td></tr></table></figure><h3 id="8-2-SCP传输文件到另一台服务器"><a href="#8-2-SCP传输文件到另一台服务器" class="headerlink" title="8.2 SCP传输文件到另一台服务器"></a>8.2 SCP传输文件到另一台服务器</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp /root/backup/backup.tar adminuser<span class="hljs-variable">@198</span>.<span class="hljs-number">171.214</span>.<span class="hljs-number">58</span><span class="hljs-symbol">:/root/data/docker-data</span><br></code></pre></td></tr></table></figure><h3 id="8-2-其他常用命令"><a href="#8-2-其他常用命令" class="headerlink" title="8.2 其他常用命令"></a>8.2 其他常用命令</h3><h4 id="8-2-1-解压"><a href="#8-2-1-解压" class="headerlink" title="8.2.1 解压"></a>8.2.1 解压</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">tar</span> -zxvf /root/<span class="hljs-class"><span class="hljs-keyword">data</span>/docker-<span class="hljs-keyword">data</span>/remark42/backup.tar</span><br></code></pre></td></tr></table></figure><h4 id="8-2-2-重命名"><a href="#8-2-2-重命名" class="headerlink" title="8.2.2 重命名"></a>8.2.2 重命名</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">mv</span> <span class="hljs-keyword">data</span> remark42  <span class="hljs-comment">#重命名文件夹</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Hexo博客</title>
    <link href="/archives/building-the-hexo-blog.html"/>
    <url>/archives/building-the-hexo-blog.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h2><ul><li>Nodejs 20.14.0（不低于 10.13）</li><li>Git 2.45.2</li></ul><blockquote><p><strong>说明</strong>：上面的版本只是我自己使用到的版本</p></blockquote><p><img src="https://img.ins.run/6g6z2p.webp" alt="环境准备.webp"></p><h2 id="2-开始安装Hexo"><a href="#2-开始安装Hexo" class="headerlink" title="2. 开始安装Hexo"></a>2. 开始安装Hexo</h2><h3 id="2-1-安装hexo"><a href="#2-1-安装hexo" class="headerlink" title="2.1 安装hexo"></a>2.1 安装hexo</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装完成输入hexo -v查看版本</p><p><img src="https://img.ins.run/APJ248.webp" alt="Hexo版本.webp"></p><h3 id="2-2-初始化hexo"><a href="#2-2-初始化hexo" class="headerlink" title="2.2 初始化hexo"></a>2.2 初始化hexo</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> Blog<br></code></pre></td></tr></table></figure><h3 id="2-3-进入文件夹，安装npm"><a href="#2-3-进入文件夹，安装npm" class="headerlink" title="2.3 进入文件夹，安装npm"></a>2.3 进入文件夹，安装npm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> Blog<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>然后hexo就安装完成了</p><p><img src="https://img.ins.run/35ZDsH.webp" alt="Hexo目录结构.webp"></p><h3 id="2-4-启动hexo服务器"><a href="#2-4-启动hexo服务器" class="headerlink" title="2.4 启动hexo服务器"></a>2.4 启动hexo服务器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p><img src="https://img.ins.run/TqkYcg.webp" alt="启动Hexo服务.webp"></p><p>访问<a href="http://localhost:4000，">http://localhost:4000，</a> 至此hexo就搭建好了</p><p><img src="https://img.ins.run/Awq5ZB.webp" alt="访问本地Hexo.webp"></p><h2 id="3-Fluid主题"><a href="#3-Fluid主题" class="headerlink" title="3. Fluid主题"></a>3. Fluid主题</h2><h3 id="3-1-下载"><a href="#3-1-下载" class="headerlink" title="3.1 下载"></a>3.1 下载</h3><p><img src="https://img.ins.run/49CTq8.webp" alt="Fluid主题.webp"></p><p>下载Fluid主题，GitHub：<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">https://github.com/fluid-dev/hexo-theme-fluid/releases</a></p><h3 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h3><p>下载完成后解压出来把文件夹修改成<code>fulid</code>，然后放置在Blog目录下的<code>themes</code>文件夹里</p><p><img src="https://img.ins.run/fpUAnz.webp" alt="Fluid主题安装.webp"></p><p>把<code>_config.yml</code>里的<code>theme: landscape</code>修改成<code>fluid</code>，至此Fluid主题就安装完成了</p><p><img src="https://img.ins.run/pIcRtk.webp" alt="Fluid主题配置文件修改.webp"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/archives/hello-world.html"/>
    <url>/archives/hello-world.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
